/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Transformer.Models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4876142571263333560L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"Transformer.Models\",\"fields\":[{\"name\":\"DefaultBillingAddress\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"City\",\"type\":\"string\"},{\"name\":\"Lien1\",\"type\":\"string\"},{\"name\":\"Zipcode\",\"type\":\"string\"}]}},{\"name\":\"DefaultDeliveryAddress\",\"type\":\"Address\"},{\"name\":\"Email\",\"type\":\"string\"},{\"name\":\"FirstName\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"LastName\",\"type\":\"string\"},{\"name\":\"Username\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private Transformer.Models.Address DefaultBillingAddress;
  private Transformer.Models.Address DefaultDeliveryAddress;
  private java.lang.CharSequence Email;
  private java.lang.CharSequence FirstName;
  private java.util.UUID Id;
  private java.lang.CharSequence LastName;
  private java.lang.CharSequence Username;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param DefaultBillingAddress The new value for DefaultBillingAddress
   * @param DefaultDeliveryAddress The new value for DefaultDeliveryAddress
   * @param Email The new value for Email
   * @param FirstName The new value for FirstName
   * @param Id The new value for Id
   * @param LastName The new value for LastName
   * @param Username The new value for Username
   */
  public Customer(Transformer.Models.Address DefaultBillingAddress, Transformer.Models.Address DefaultDeliveryAddress, java.lang.CharSequence Email, java.lang.CharSequence FirstName, java.util.UUID Id, java.lang.CharSequence LastName, java.lang.CharSequence Username) {
    this.DefaultBillingAddress = DefaultBillingAddress;
    this.DefaultDeliveryAddress = DefaultDeliveryAddress;
    this.Email = Email;
    this.FirstName = FirstName;
    this.Id = Id;
    this.LastName = LastName;
    this.Username = Username;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return DefaultBillingAddress;
    case 1: return DefaultDeliveryAddress;
    case 2: return Email;
    case 3: return FirstName;
    case 4: return Id;
    case 5: return LastName;
    case 6: return Username;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: DefaultBillingAddress = (Transformer.Models.Address)value$; break;
    case 1: DefaultDeliveryAddress = (Transformer.Models.Address)value$; break;
    case 2: Email = (java.lang.CharSequence)value$; break;
    case 3: FirstName = (java.lang.CharSequence)value$; break;
    case 4: Id = (java.util.UUID)value$; break;
    case 5: LastName = (java.lang.CharSequence)value$; break;
    case 6: Username = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'DefaultBillingAddress' field.
   * @return The value of the 'DefaultBillingAddress' field.
   */
  public Transformer.Models.Address getDefaultBillingAddress() {
    return DefaultBillingAddress;
  }


  /**
   * Sets the value of the 'DefaultBillingAddress' field.
   * @param value the value to set.
   */
  public void setDefaultBillingAddress(Transformer.Models.Address value) {
    this.DefaultBillingAddress = value;
  }

  /**
   * Gets the value of the 'DefaultDeliveryAddress' field.
   * @return The value of the 'DefaultDeliveryAddress' field.
   */
  public Transformer.Models.Address getDefaultDeliveryAddress() {
    return DefaultDeliveryAddress;
  }


  /**
   * Sets the value of the 'DefaultDeliveryAddress' field.
   * @param value the value to set.
   */
  public void setDefaultDeliveryAddress(Transformer.Models.Address value) {
    this.DefaultDeliveryAddress = value;
  }

  /**
   * Gets the value of the 'Email' field.
   * @return The value of the 'Email' field.
   */
  public java.lang.CharSequence getEmail() {
    return Email;
  }


  /**
   * Sets the value of the 'Email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.Email = value;
  }

  /**
   * Gets the value of the 'FirstName' field.
   * @return The value of the 'FirstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return FirstName;
  }


  /**
   * Sets the value of the 'FirstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.FirstName = value;
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public java.util.UUID getId() {
    return Id;
  }


  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'LastName' field.
   * @return The value of the 'LastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return LastName;
  }


  /**
   * Sets the value of the 'LastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.LastName = value;
  }

  /**
   * Gets the value of the 'Username' field.
   * @return The value of the 'Username' field.
   */
  public java.lang.CharSequence getUsername() {
    return Username;
  }


  /**
   * Sets the value of the 'Username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.Username = value;
  }

  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static Transformer.Models.Customer.Builder newBuilder() {
    return new Transformer.Models.Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static Transformer.Models.Customer.Builder newBuilder(Transformer.Models.Customer.Builder other) {
    if (other == null) {
      return new Transformer.Models.Customer.Builder();
    } else {
      return new Transformer.Models.Customer.Builder(other);
    }
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static Transformer.Models.Customer.Builder newBuilder(Transformer.Models.Customer other) {
    if (other == null) {
      return new Transformer.Models.Customer.Builder();
    } else {
      return new Transformer.Models.Customer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    private Transformer.Models.Address DefaultBillingAddress;
    private Transformer.Models.Address.Builder DefaultBillingAddressBuilder;
    private Transformer.Models.Address DefaultDeliveryAddress;
    private Transformer.Models.Address.Builder DefaultDeliveryAddressBuilder;
    private java.lang.CharSequence Email;
    private java.lang.CharSequence FirstName;
    private java.util.UUID Id;
    private java.lang.CharSequence LastName;
    private java.lang.CharSequence Username;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Transformer.Models.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.DefaultBillingAddress)) {
        this.DefaultBillingAddress = data().deepCopy(fields()[0].schema(), other.DefaultBillingAddress);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasDefaultBillingAddressBuilder()) {
        this.DefaultBillingAddressBuilder = Transformer.Models.Address.newBuilder(other.getDefaultBillingAddressBuilder());
      }
      if (isValidValue(fields()[1], other.DefaultDeliveryAddress)) {
        this.DefaultDeliveryAddress = data().deepCopy(fields()[1].schema(), other.DefaultDeliveryAddress);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasDefaultDeliveryAddressBuilder()) {
        this.DefaultDeliveryAddressBuilder = Transformer.Models.Address.newBuilder(other.getDefaultDeliveryAddressBuilder());
      }
      if (isValidValue(fields()[2], other.Email)) {
        this.Email = data().deepCopy(fields()[2].schema(), other.Email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.FirstName)) {
        this.FirstName = data().deepCopy(fields()[3].schema(), other.FirstName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.Id)) {
        this.Id = data().deepCopy(fields()[4].schema(), other.Id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.LastName)) {
        this.LastName = data().deepCopy(fields()[5].schema(), other.LastName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.Username)) {
        this.Username = data().deepCopy(fields()[6].schema(), other.Username);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(Transformer.Models.Customer other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.DefaultBillingAddress)) {
        this.DefaultBillingAddress = data().deepCopy(fields()[0].schema(), other.DefaultBillingAddress);
        fieldSetFlags()[0] = true;
      }
      this.DefaultBillingAddressBuilder = null;
      if (isValidValue(fields()[1], other.DefaultDeliveryAddress)) {
        this.DefaultDeliveryAddress = data().deepCopy(fields()[1].schema(), other.DefaultDeliveryAddress);
        fieldSetFlags()[1] = true;
      }
      this.DefaultDeliveryAddressBuilder = null;
      if (isValidValue(fields()[2], other.Email)) {
        this.Email = data().deepCopy(fields()[2].schema(), other.Email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.FirstName)) {
        this.FirstName = data().deepCopy(fields()[3].schema(), other.FirstName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Id)) {
        this.Id = data().deepCopy(fields()[4].schema(), other.Id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.LastName)) {
        this.LastName = data().deepCopy(fields()[5].schema(), other.LastName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Username)) {
        this.Username = data().deepCopy(fields()[6].schema(), other.Username);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'DefaultBillingAddress' field.
      * @return The value.
      */
    public Transformer.Models.Address getDefaultBillingAddress() {
      return DefaultBillingAddress;
    }


    /**
      * Sets the value of the 'DefaultBillingAddress' field.
      * @param value The value of 'DefaultBillingAddress'.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder setDefaultBillingAddress(Transformer.Models.Address value) {
      validate(fields()[0], value);
      this.DefaultBillingAddressBuilder = null;
      this.DefaultBillingAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'DefaultBillingAddress' field has been set.
      * @return True if the 'DefaultBillingAddress' field has been set, false otherwise.
      */
    public boolean hasDefaultBillingAddress() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'DefaultBillingAddress' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Transformer.Models.Address.Builder getDefaultBillingAddressBuilder() {
      if (DefaultBillingAddressBuilder == null) {
        if (hasDefaultBillingAddress()) {
          setDefaultBillingAddressBuilder(Transformer.Models.Address.newBuilder(DefaultBillingAddress));
        } else {
          setDefaultBillingAddressBuilder(Transformer.Models.Address.newBuilder());
        }
      }
      return DefaultBillingAddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'DefaultBillingAddress' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Transformer.Models.Customer.Builder setDefaultBillingAddressBuilder(Transformer.Models.Address.Builder value) {
      clearDefaultBillingAddress();
      DefaultBillingAddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'DefaultBillingAddress' field has an active Builder instance
     * @return True if the 'DefaultBillingAddress' field has an active Builder instance
     */
    public boolean hasDefaultBillingAddressBuilder() {
      return DefaultBillingAddressBuilder != null;
    }

    /**
      * Clears the value of the 'DefaultBillingAddress' field.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder clearDefaultBillingAddress() {
      DefaultBillingAddress = null;
      DefaultBillingAddressBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'DefaultDeliveryAddress' field.
      * @return The value.
      */
    public Transformer.Models.Address getDefaultDeliveryAddress() {
      return DefaultDeliveryAddress;
    }


    /**
      * Sets the value of the 'DefaultDeliveryAddress' field.
      * @param value The value of 'DefaultDeliveryAddress'.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder setDefaultDeliveryAddress(Transformer.Models.Address value) {
      validate(fields()[1], value);
      this.DefaultDeliveryAddressBuilder = null;
      this.DefaultDeliveryAddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'DefaultDeliveryAddress' field has been set.
      * @return True if the 'DefaultDeliveryAddress' field has been set, false otherwise.
      */
    public boolean hasDefaultDeliveryAddress() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'DefaultDeliveryAddress' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Transformer.Models.Address.Builder getDefaultDeliveryAddressBuilder() {
      if (DefaultDeliveryAddressBuilder == null) {
        if (hasDefaultDeliveryAddress()) {
          setDefaultDeliveryAddressBuilder(Transformer.Models.Address.newBuilder(DefaultDeliveryAddress));
        } else {
          setDefaultDeliveryAddressBuilder(Transformer.Models.Address.newBuilder());
        }
      }
      return DefaultDeliveryAddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'DefaultDeliveryAddress' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Transformer.Models.Customer.Builder setDefaultDeliveryAddressBuilder(Transformer.Models.Address.Builder value) {
      clearDefaultDeliveryAddress();
      DefaultDeliveryAddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'DefaultDeliveryAddress' field has an active Builder instance
     * @return True if the 'DefaultDeliveryAddress' field has an active Builder instance
     */
    public boolean hasDefaultDeliveryAddressBuilder() {
      return DefaultDeliveryAddressBuilder != null;
    }

    /**
      * Clears the value of the 'DefaultDeliveryAddress' field.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder clearDefaultDeliveryAddress() {
      DefaultDeliveryAddress = null;
      DefaultDeliveryAddressBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return Email;
    }


    /**
      * Sets the value of the 'Email' field.
      * @param value The value of 'Email'.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Email' field has been set.
      * @return True if the 'Email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Email' field.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder clearEmail() {
      Email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'FirstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return FirstName;
    }


    /**
      * Sets the value of the 'FirstName' field.
      * @param value The value of 'FirstName'.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.FirstName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'FirstName' field has been set.
      * @return True if the 'FirstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'FirstName' field.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder clearFirstName() {
      FirstName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return Id;
    }


    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder setId(java.util.UUID value) {
      validate(fields()[4], value);
      this.Id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder clearId() {
      Id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'LastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return LastName;
    }


    /**
      * Sets the value of the 'LastName' field.
      * @param value The value of 'LastName'.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.LastName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'LastName' field has been set.
      * @return True if the 'LastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'LastName' field.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder clearLastName() {
      LastName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return Username;
    }


    /**
      * Sets the value of the 'Username' field.
      * @param value The value of 'Username'.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.Username = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Username' field has been set.
      * @return True if the 'Username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'Username' field.
      * @return This builder.
      */
    public Transformer.Models.Customer.Builder clearUsername() {
      Username = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        if (DefaultBillingAddressBuilder != null) {
          try {
            record.DefaultBillingAddress = this.DefaultBillingAddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("DefaultBillingAddress"));
            throw e;
          }
        } else {
          record.DefaultBillingAddress = fieldSetFlags()[0] ? this.DefaultBillingAddress : (Transformer.Models.Address) defaultValue(fields()[0]);
        }
        if (DefaultDeliveryAddressBuilder != null) {
          try {
            record.DefaultDeliveryAddress = this.DefaultDeliveryAddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("DefaultDeliveryAddress"));
            throw e;
          }
        } else {
          record.DefaultDeliveryAddress = fieldSetFlags()[1] ? this.DefaultDeliveryAddress : (Transformer.Models.Address) defaultValue(fields()[1]);
        }
        record.Email = fieldSetFlags()[2] ? this.Email : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.FirstName = fieldSetFlags()[3] ? this.FirstName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.Id = fieldSetFlags()[4] ? this.Id : (java.util.UUID) defaultValue(fields()[4]);
        record.LastName = fieldSetFlags()[5] ? this.LastName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.Username = fieldSetFlags()[6] ? this.Username : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










